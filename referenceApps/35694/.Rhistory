add.note("why use a task runner?")
add.note("problem of repeating the same thing over and over again")
add.note("preparing JS/HTML/CSS for production")
add.note("minify, concat, vendor prefixes, less CSS compilation, vendor / custom code, injecting files, cache busting, angular template cache....")
add.note("gulp build")
add.note("automate tasks: code quality; tests; pipeline")
add.note("develop->analyze->test->build->deploy")
add.note("grunt: configuration over code; filebased; 3900+ plugins")
add.note("gulp: code over configuration, stream based, 1100+ plugins, use node more readily")
add.note("File System->Read Files->Modify->Write Files->Temp->Read Files->Modify->")
add.note("File System->Read Files->Modify->Write Files->Temp->Read Files->Modify->Write Files->Temp->Read Files->Modify->Write Files->Dest")
add.note("File System->Read Files->Modify->Modify->Modify->Write Files->Dest")
add.note("jshint:{}, concat{}, uglify{}")
add.note("gulp.task('js',function(){ return gulp    .src('**/*.js')    .pipe($.jshint())    .pipe($.concat())    .pipe($.uglify())    .pipe(gulp.dest('./build/'));});")
add.note("js provide some files, alter the files, alter the files, alter the files, send to destination")
add.note("js gulp: streamline your tasks")
add.note("js 4 things you need to know about gulp")
add.note("js 1) gulp.task 2) gulp.src 3) gulp.dest 4) gulp.watch")
add.note("js gulp.task('js',function(){return gulp    .src(...)    ... ... ...});")
add.note("js gulp.task('js',function(){return gulp    .src(...)    pipe(...) pipe(...) pipe(...)});")
add.note("js use gulp.task when making new tasks")
add.note("js gulp.src")
add.note("js gulp.src(glob[,options])")
add.note("js linted or tested | optimized | modified")
add.note("js gulp.dest")
add.note("js write files | write to dest | ...")
add.note("js gulp.watch")
add.note("js gulp.watch(pattern, . . . )")
add.note("js gulp.task('js',function(){return gulp    .src(pattern)    pipe(...) pipe(...) pipe(...) pipe(...)});")
add.note("js https://github.com/johnpapa/pluralsight-gulp.git")
add.note("js download zip | use git")
add.note("js $ mkdir code")
add.note("js $ cd code")
add.note("js $ git clone https://github.com/johnpapa/pluralsight-gulp.git")
add.note("js getting Node.js Windows:")
add.note("js getting Node.js Windows: chocolatey.org")
add.note("js getting Node.js Windows: chocolatey.org    choco install . . . ")
add.note("js package download prompt to use sudo. Eliminate need by ")
add.note("js $ cd pluralsight-gulp/")
add.note("js npmjs.com")
add.note("package managers: gulp & npm & bower")
add.note("$ npm install -g gulp")
add.note("$ npm install -g bower")
add.note("$ gulp -v")
add.note("$ bower -v")
add.note("$ npm list -g --depth=0")
add.note("$ npm install --save-dev package-name")
add.note("$ npm install gulp --save-dev package-name")
add.note("$ npm install gulp --save-dev")
add.note("be in the right project folder!")
add.note("dependencies: needed at run-time, (npm)|(bower) install--save, ")
add.note("$ npm install --save-dev gulp")
add.note("$ var gulp = require('gulp');")
add.note("var gulp = require('gulp');")
add.note("gulp.task('hello-world',function(){console.log('Our first gulp task!');});")
add.note("var gulp = require('gulp');")
add.note("gulpfile.js")
add.note("gulp.task('hello-world',function(){console.log('our first hello world task!')});")
add.note("function foo(){var x=1};")
add.note("$ npm install gulp-jshint gulp-jscs --save-dev")
add.note("var jshint = require('gulp-jshint');")
add.note("var jscs = require('gulp-jscs')")
add.note("$ npm install --save-dev")
add.note("$ npm install --save-dev gulp-jscs gulp-jshint")
add.note("gulp.task('vet',function(){);")
add.note("gulp.task('vet',function(){});")
add.note("var jshint = require('gulp-jshint');")
add.note("var jscs = require('gulp-jscs');")
add.note("gulp.task('vet',function(){gulp.src(['./src/**/*.js','./*.js'])});")
add.note("gulp.task('vet',function(){return gulp    .src([    './src/**/*.js',    './*.js'    ])    .pipe(jscs())    .pipe(jshint());    });")
add.note("gulp.task('vet',function(){return gulp    .src([    './src/**/*.js',    './*.js'    ])    .pipe(jscs())    .pipe(jshint())    .pipe(jshint.reporter('jshint-stylish' {verbose: true}));    });")
add.note("$ npm install --save-dev jshint-stylish")
add.note("$ gulp vet")
add.note("$ function foo(){ var y = 2; var x = 1}")
add.note("function foo(){ var y = 2; var x = 1}")
add.note("log('Analyzing source with JSHint and JSCS');")
add.note("function log(msg){}")
add.note("var util = require('gulp-util');")
add.note("$npm install --save-dev gulp-util")
add.note("$ gulp vet")
add.note(".pipe(jshint.reporter('fail'));")
add.note(".pipe(print())")
add.note("var gulpprint = require('gulp-print');")
add.note("$ npm install --save-dev gulp-print")
add.note(".pipe(gulpif(condition, gulpprint())")
add.note("var gulpif = require('gulp-if');")
add.note(".pipe(gulpif(args.verbose, gulpprint())")
add.note("var args = require('yargs').argv;")
add.note("$ npm install --save-dev gulp-if yargs")
add.note("$ gulp vet")
add.note("$ gulp vet --verbose")
add.note("var $ = require('gulp-load-plugins')({lazy: true});")
add.note("pipe($.if(args.verbose, $.print()))")
add.note("$.util.log($.util.colors.blue(msg[item]));")
add.note("$.util.log($.util.colors.blue(msg));")
add.note("$ npm install --save-dev gulp-load-plugins")
add.note("module.exports = function(){var config = {alljs:[]}; return config};")
add.note("module.exports = function(){var config = {alljs:['./src/**/*.js','./*.js']}; return config}; //all js to vet")
add.note("module.exports = function(){.src(config.alljs)")
add.note("var $ = require('gulp-load-plugins')({lazy:true});")
add.note("var config = require('./gulp.config');")
add.note("var config = require('./gulp.config')();")
add.note("$ gulp vet")
add.note("$ gulp vet")
add.note("$ gulp vet --verbose")
add.note("$ npm install --save-dev yargs gulp-load-plugins gulp-if gulp-print jshint-stylish gulp-util")
add.note("@base: #f938ab;")
add.note(".box-shadow(@style, @c) when (iscolor(@c)){...}    .box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)){...}    .box {...}")
add.note(".box-shadow(@style, @c) when (iscolor(@c)){    -webkit-box-shadow: @style @c;    box-shadow: @style @c;}")
add.note(".box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)){.box-shadow(@style,rgba(0,0,0, @alpha));    }")
add.note(".box {    color: saturate(@base, 5%);    border-color: lighten(@base, 30%);    div{ .box-shadow(0 0 5 px, 30%) }    }")
add.note(".box-shadow(@style, @c) when (iscolor(@c)){...}    .box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)){...}    .box {...}    .box{...}    .box{...}")
add.note(".box{    color: #fe33ac;    border-color: #fdcdea;    }")
add.note(".box-shadow(@style, @c) when (iscolor(@c)){...}    .box-shadow(@style, @alpha: 50%) when (isnumber(@alpha)){...}    .box {...}    .box{...}    .box div{...}")
add.note(".box div{    -webkit-box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);    box-shadow: 0 0 5px rgba(0, 0, 0, 0.3);    }")
add.note(".sample-style{    transform-origin: center bottom;    }")
add.note(".sample-style{...}    .sample-style{...}")
add.note(".sample-style{    -webkit-transform-origin: center bottom;    transofrm-origin: center bottom;    }")
add.note("$ npm install --save-dev gulp-less gulp-autoprefixer")
add.note("gulp.task('styles',function(){    log(...);    return gulp    .src(...) //TDODO add the config    .pipe(...)    .pipe(...)    .pipe(...);    });")
add.note("log('Compiling less --> CSS');")
add.note("return gulp")
add.note(".src(config.less) //TDODO add the config")
add.note(".pipe($.less())")
add.note(".pipe($.autoprefixer({browsers: ['last 2 version','> 5%']}))")
add.note(".pipe(gulp.dest(config.temp));")
add.note("var client = '.src/client/';    var config = {temp: './.tmp',    alljs: [...],    less: client + 'styles/styles.less'}")
add.note(".style-test{    transform-origin: center bottom;    }")
add.note("gulp.task('clean-styles', function(){    var files = config.temp + '**/*css'    del(files);    })")
add.note("npm install del --save-dev")
add.note("var del = require('del');")
add.note("$ gulp clean-styles")
add.note("['clean-styles']")
add.note("function clean(path){    log('Cleaning: ' + $.util.colors.blue(path));    del(path);    }")
add.note("clean(files);")
add.note("$ gulp styles")
add.note("$ gulp clean-styles")
add.note("gulp.task('clean-styles',function(done){    ...    clean(files, done)    })")
add.note("function clean(path, done){    ...    del(path, done);    }")
add.note("$ gulp styles")
add.note("gulp.task('less-watcher',function(){    gulp.watch([config.less], ['styles'])    });")
add.note("$ gulp less-watcher")
add.note("@color_nothing: #000000")
add.note("temp: './.tmp/'")
add.note("gulp.task('styles',function(){    ...    ...    ...    ...    .on('error', errorLogger)    ...    ...    });")
add.note("function errorLogger(error){    log('***Start of Error***');    log(error);    log('***End of Error***');    this.emit('end')    }")
add.note("$ gulp less-watcher")
add.note("gulp.task('styles',function(){    ...    ...    ...    .pipe($.plumber())    ...    //.on(...)    ...    ...    });")
add.note("<html ng-app='app'><head><!--bower:css--><!--endbower--><!--inject:css--><!--endinject--></head><body><div ng-include='\"app/layout/shell.html\"'></div><!--bower:js--><!--endbower--><!--inject:js--><!--endinject--></body></html>")
add.note("$ node src/server/app.js")
add.note("gulp.task('wiredep',function(){});")
add.note("$ npm install --save-dev wiredep gulp-inject")
add.note("gulp.task('wiredep',function(){    var options = config.getWiredepDefaultOptions(); //TODO    var wiredep = require('wiredep').stream;    return gulp .src(config.index) //TODO index.html    .pipe(wiredep(options))    .pipe($.inject(gulp.src(config.js))) //TDO js ?    .pipe(gulp.dest(config.client)); //TODO config ?    });")
add.note("module.exports = function(){    ...    clientApp = client + 'app/';    .........    index: client + 'index.html'    js: [    '!' + clientApp + '**/*.module.js'    '**/*.js'    '**/*.spec.js'    ],    ......    };")
add.note("module.exports = function(){    ..........    client: client;    .........    };")
add.note("module.exports = function(){    .................    config.function getWiredepDefaultOptions = function (){    var options = {    bowerJson: config.bower.json,    directory: config.bower.directory,    ignorePath: config.bower.ignorePath    };    ...    };")
add.note("module.exports = function(){    .................    bower:{    json: require('./bower.json),    directory: './bower_components/',    ignorePath: '../..'    }    .......    };")
add.note("<!-- bower:css -->    <!-- endbower-->")
add.note("<!-- bower:js -->    <!-- endbower-->")
add.note("<!-- inject:js -->    <!-- endinject-->")
add.note("$ gulp wiredep")
add.note("$ node src/server/app.js")
add.note("'scripts':{    'postinstall':'gulp wiredep'    }")
add.note("$ bower install --save angular-resource")
add.note("$ bower uninstall --save angular-resource")
add.note("<-- endinject -->")
add.note("<-- inject:css -->")
add.note("gulp.task('inject', function() {    .......    })")
add.note("gulp.task('inject',['wiredep','styles'], function() {    .......    })")
add.note("log('Wire up the bower css js and our app js into the html');")
add.not(".pipe($.inject(gulp.src(config.css)))
)
)
""
"
add.not(".pipe($.inject(gulp.src(config.css)))")
add.note(".pipe($.inject(gulp.src(config.css)))")
add.note("css: 'styles.css',")
add.note("var temp = './.tmp/'")
add.note("css: tmp + 'styles.css',")
add.note("$ gulp inject")
add.note("node src/server/app.js")
add.note("gulp serve-dev")
add.note("$ gulp inject")
add.note("node src/server//app.js")
add.note("$ npm install --save-dev gulp-nodemon")
add.note("gulp.task('serve-dev', ['inject'],function(){    var nodeOptions = {    script: config.nodeServer,    // TODO app.js    delayTime: 1    env: { 'PORT': port, 'NOE_ENV': isDev ? 'dev' : 'build';    }    }    return $.nodemon(nodeOptions);    });")
add.note("gulp.task('serve-dev', ['inject'],function(){    var nodeOptions = {    script: config.nodeServer,    // TODO app.js    delayTime: 1    env: {...}    watch: [config.server] //TODO    define the files to restart on }    return $.nodemon(nodeOptions);    });")
add.note("defaultPort: 7203,    nodeServer: './src/server/app.js'")
add.note("server: ''")
add.note("var server = './src/server/';")
add.note("server: server,")
add.note("$ gulp serve-dev")
add.note("var port = 8001")
add.note(".on('restart', function(ev) {    log('*** nodemon restarted');    log('files changed on restart:\n' + ev);    })    .on('start', function() {    log('*** nodemon started')    })    .on('crash', function() {    log('*** nodemon crashed:...')    })    .on('exit', function() {    log('*** nodemon exited cleanly')    });")
add.note("var foo  = require('express');")
add.note("var express  = require('express');")
add.note(".on('restart', ['vet'], function(ev) {    log('*** nodemon restarted');    log('files changed on restart:\n' + ev);    })    .on('start', function() {    log('*** nodemon started')    })    .on('crash', function() {    log('*** nodemon crashed:...')    })    .on('exit', function() {    log('*** nodemon exited cleanly')    });")
add.note("$ gulp serve-dev")
add.note(".on('restart', function(ev) {    log('*** nodemon restarted');    log('files changed on restart:\n' + ev);    })    .on('start', function() {    log('*** nodemon started')    })    .on('crash', function() {    log('*** nodemon crashed:...')    })    .on('exit', function() {    log('*** nodemon exited cleanly')    });")
add.note("browsersync({    proxy:'localhost',    port:3000,    files: ['./src/client/**/*'],    ghostmode: {    clicks: true,    location: false,    forms: true,    scroll: true    },    injectChanges: true,    reloadDelay: 1000    });")
add.note("$ npm install browser-sync --save-dev")
add.note("var browserSync = require('browser-sync');")
add.note("return $.nodemon(...)    ...    .on('start',function(ev){...startBrowserSync();    })")
add.note("function startBrowserSync(){    if(browserSync.active){    return;    }    log('Starting browserSync on port ' + port),    var options = {    proxy: 'localhost:' + port,    port: 3000,    files: [config.client + '**/*.*'],    ghostMode:{    clicks: true, location: false,    forms: true,    scroll: true    },    injectChanges: true,    logFileChanges: true, logLevel: 'debug',    logPrefix: 'gulp-patterns',    notify: true,    reloadDelay: 1000,    };    broswerSync();    }")
add.note("$ gulp serve-dev")
add.note("logger.info('Activated Dashboard View 123')")
add.note("logger.info('Activated Dashboard View')")
add.note("@color_violet: yellow; // #935ab6")
add.note("function startBrowserSync(){    if(...){...}    log(...),    var options = {    ...    files: [    config.client + '**/*.*',    '!' + config.less,    config.temp + '**/*.css'    ],    ghostMode:{...},    ......    };    broswerSync(options);    }")
add.note("gulp.task('less-watcher', function(){    gulp.watch([config.less], ['styles']);    })")
add.note("gulp.watch([config.less], ['styles'])    .on('change',function(event){ changeEvent(event); });")
add.note("function changeEvent(event){    var srcPattern = new RegExp('/.*(?=/' + config.source + ')/');    log('File' + event.path.replace(srcPattern, '') + ' ' + event.type); }")
add.note("! gulp serve-dev")
add.note("@color_violet: red ;")
add.note("reloadDelay: 1000")
add.note("$ gulp serve-dev")
add.note("@color_violet: gree ;")
add.note("@color_violet: green ;")
add.note("@color_violet: blue ;")
add.note("getCustomers().then(function()    {    logger.info('Activated Dashboard View Here we are!!!!');    });")
add.note("setTimeout(function(){    }, config.browserReloadDelay)")
add.note("setTimeout(function(){    browserSync.notify('reloading now...');    browserSync.reload({stream: false});    }, config.browserReloadDelay)")
add.note("function startBrowserSync(){    if(args.nosync || browserSync.active){    return;    }")
add.note("$ gulp serve-dev --nosync")
add.note("$ gulp serve-dev")
add.note("gulp.task('fonts',['clean-fonts'], function() {    log('Copying fonts');    return gulp.src(config.fonts)    .pipe(gulp.dest(config.build + 'fonts'));    });")
add.note("$ npm install --save-dev gulp-task-listing gulp-imagemin")
add.note("gulp.task('help', $.taskListing);")
add.note("gulp.task('help', function(){    $.taskListing();    } );")
add.note("$ gulp help")
add.note("gulp.task('default',['help']);")
add.note("gulp.task('fonts',function(){    return gulp.src(config.fonts)    .pipe(gulp.dest(config.build + 'fonts'))    });")
add.note("gulp.task('fonts',function(){    log('copying fonts');    return gulp.src(config.fonts)    .pipe(gulp.dest(config.build + 'fonts'))    });")
add.note("var config = {    ...:[...],    build:'./build/'},    ...:...,    ...:...,    fonts:'./bower_components/font-awesome/fonts/**/*.*'")
add.note("$ gulp fonts")
gulp.task('images' function(){    log('copying the images');    return gulp    .src(config.fonts)    .pipe(gulp.dest(config.build + 'fonts'));    })
add.note("gulp.task('images' function(){    log('copying the images');    return gulp    .src(config.fonts)    .pipe(gulp.dest(config.build + 'fonts'));    })")
add.note("gulp.task('images' function(){    log('copying and compressing the images');    return gulp    .src(config.images)    .pipe($.imagemin({optimizationLevel:4}))    .pipe(gulp.dest(config.build + 'images'));    })")
add.note("var config = {...:[...], ...:..., ...:..., ...:..., ...:..., images:client + 'images/**/*.*'}, ...:..., ...:..., ...:..., ...:..., ...:...,")
add.note("$ gulp images")
add.note("gulp.task('clean-fonts', function(done){    clean(config.build + 'fonts/**/*.*',done);    });")
add.note("gulp.task('clean-images', function(done){    clean(config.build + 'images/**/*.*',done);    });")
add.note("gulp.task('clean-styles', function(done){    clean(config.build + 'styles/**/*.*',done);    });")
add.note("gulp.task('clean', function(done){    var delconfig = [].concat(config.build, config.temp);    log('Cleaning: ' + $.util.colors.blue(delconfig));    del(delconfig, done)    });")
add.note("$ gulp clean-fonts")
add.note("$ gulp fonts")
add.note("$ gulp styles")
add.note("$ gulp clean")
add.note("gulp.task('fonts', ['clean-fonts'], function(){    log('copying fonts');    return gulp    .src(config.fonts)    .pipe(gulp.dest(config.build + 'fonts'));    });")
add.note("gulp.task('images', ['clean-images'], function(){    log('copying and compressing the images');    return gulp    .src(config.images)    .pipe($.imagemin({optimizationLevel: 4}))    .pipe(gulp.dest(config.build + 'images'));    });")
add.note("gulp.task('styles', function(){    log('copying less --> CSS');    return gulp    .src(config.less)    .pipe($.plumber())    .pipe($.less())    .pipe($.autoprefixer({browsers:['last 2 version','> 5%']}))    .pipe(gulp.dest(config.temp));    });")
add.note("$ gulp styles")
add.note("$ gulp styles")
add.note("$templateCache.put('app/layout/ht-top-nav.html'),    '<nav class=\'navbar navbar-fixed-top \'> ...</nav>")
add.note("angular.module('app.layout')    .directive('htTopNav', htTopNav);")
add.note("function htTopNav () {    var directive = {    bindToController: true,    controller: TopNavController, controllerAs: 'vm',    restrict: 'EA',    scope: {    'tagline':'=', 'title':'='    },    templateUrl: 'app/layout/ht-top-nav.html'    };    return directive;    }")
add.note("gulp.task('clean-code', function(done){    var files = [].concat(    config.temp + '**/*.js',    config.build + '**/*.html'    config.build + 'js/**/*.js'    );    clean(files, done);    });")
add.note("$ gulp")
add.note("$ gulp clean-code")
add.note("gulp.task('templatecache',['clean-code'], function(){    log('Creating AngularJS $templateCache');    return gulp    .src(config.htmltemplates)    .pipe($.minifyHtml({empty:true}));    .pipe($.angularTemplatecache())    .pipe(gulp.dest(config.temp));    });")
add.note("$ npm install --save-dev gulp-minify-html gulp-angular-templatecache")
add.note("gulp.task('templatecache',['clean-code'], function(){    log('Creating AngularJS $templateCache');    return gulp    .src(config.htmltemplates)    .pipe($.minifyHtml({empty:true}));    .pipe($.angularTemplatecache(    config.templateCache.file,    config.templateCache.options    ))    .pipe(gulp.dest(config.temp));    });")
add.note("var config = {    .........:::.........    htmltemplates: clientApp + '**/*.html',    .........:::.........    templateCache: {    file: 'templates.js',    options: {    module: 'app.core',    standAlone: false,    root: 'app/'}    }    .........:::.........}")
add.note("$ gulp templatecache")
add.note("$ gulp templatecache")
add.note("<script src = 'js/lib.js'></script>")
add.note("<script src = 'js/app.js'></script>")
add.note("<div ng-include='...'></div>")
add.note(".pipe($.userefassets())")
add.note(".pipe($.useref.assets())")
add.note(".pipe($.useref.assets.restort())")
add.note(".pipe($.useref.assets.restore())")
add.note(".pipe($.useref())")
add.note
notes<-as.matrix(read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character"))
View(notes)
slice<-subset(notes,grepl("$","notes[,1]"))
slice<-subset(notes,grepl("$","notes[,1]")==TRUE)
slice<-subset(notes,grepl("LUG","notes[,1]")==TRUE)
slice<-subset(notes,grepl("total","notes[,1]")==TRUE)
slice<-subset(notes,strsplit(as.character("notes[,1]")," ")[1]=="03406")
class(strsplit(as.character("notes[,1]")," "))
length(strsplit(as.character("notes[,1]")," "))
class(strsplit(as.character("notes[,1]")," ")[[1]])
length(strsplit(as.character("notes[,1]")," ")[[1]])
length(strsplit(as.character("notes[,1]")," ")[[1]][[1]])
class(strsplit(as.character("notes[,1]")," ")[[1]][[1]])
nchar(strsplit(as.character("notes[,1]")," ")[[1]][[1]])
nchar(strsplit(as.character("notes[,1]")," ")[[1]])
(strsplit(as.character("notes[,1]")," ")[[1]])
slice<-subset(notes,strsplit(as.character(notes[,1])," ")[1]=="03406")
slice<-subset(notes,strsplit(as.character(notes[,1])," ")[[1]]=="03406")
subset(notes,strsplit(as.character(notes[,1])," ")[[1]]
)
notes,strsplit(as.character(notes[,1])," ")[[1]]
strsplit(as.character(notes[,1])," ")[[1]]
as.character(notes[,1])
strsplit(as.character(notes[,1])," ")[[1]]
strsplit(as.character(notes[,1]),"$")[[1]]
strsplit(as.character(notes[,1])," ")
unlist(strsplit(as.character(notes[,1])," "))
unlist(strsplit(as.character(notes[,1])[1]," "))
unlist(strsplit(as.character(notes[,1])," ")[1])
unlist(strsplit(as.character(notes[,1])," ")[[1]])
tail(notes)
View(notes)
notes<-data.frame(notes)
colnames(notes)
View(notes)
View(subset(notes,grepl("gulp.task",notes[,1])))
View(subset(notes,grepl("gulp.task('optimize",notes[,1])))
View(subset(notes,grepl("gulp.task\('optimize",notes[,1])))
View(subset(notes,grepl("gulp.task\\('optimize",notes[,1])))
View(subset(notes,grepl(c("gulp.task","optimize"),notes[,1])))
View(subset(notes,grepl("gulp.task",notes[,1])))
View(subset(notes,grepl("gulp.task",notes[,1]) & grepl("clean-code",notes[,1])))
View(subset(notes,grepl("gulp.task",notes[,1]) & grepl("templatecache",notes[,1])))
View(subset(notes,grepl("gulp.task",notes[,1]) & grepl("optimize",notes[,1])))
add.note("gulp.task('optimize',['inject'],function(){    log('Optimizing the javascript, html, css');    return gulp    .src(config.index)    });")
View(subset(notes,grepl(".pipe",notes[,1]) & grepl("plumber",notes[,1])))
add.note(".pipe($.plumber())")
add.note(".pipe(gulp.dest(config.build));")
add.note("gulp.task('inject',['wiredep','styles','templatecache'] function() {...}")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var templateCache = config.temp + config.templateCache.file;    return gulp.src(...).pipe(...).pipe($.inject(gulp.src(templateCache, {read:false}), {starttag:'<!-- inject:templates:js -->'    })).pipe(...)    });")
add.note("$ gulp optimize")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var templateCache = config.temp + config.templateCache.file;    return gulp.src(...).pipe(...).pipe(...).pipe($.useref.assets({searchPath:'./'})).pipe(...)    });")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var assets = $.useref.assets({searchPath:'./'});    var templateCache = config.temp + config.templateCache.file;return gulp.src(...).pipe(...).pipe(...).pipe(assets).pipe(...)    });")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var assets = $.useref.assets({searchPath:'./'});    var templateCache = config.temp + config.templateCache.file;return gulp.src(...).pipe(...).pipe(...).pipe(assets).pipe(assets.restore).pipe(...)    });")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var assets = $.useref.assets({searchPath:'./'});    var templateCache = config.temp + config.templateCache.file;return gulp.src(...).pipe(...).pipe(...).pipe(assets).pipe(assets.restore()).pipe(...)    });")
add.note("npm install --save-dev gulp-useref")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var assets = $.useref.assets({searchPath:'./'});    var templateCache = config.temp + config.templateCache.file;return gulp.src(...).pipe(...).pipe(...).pipe(...).pipe(assets.restore()).pipe($.useref()).pipe(...)    });")
add.note("$ gulp optimize")
add.note("$ gulp clean")
add.note("$ gulp optimize")
add.note("$ gulp images")
add.note("$ gulp fonts")
add.note("$ NODE_ENV=build node src/server/app.js")
add.note("gulp.task('serve-build',['inject'], function() {    });")
add.note("gulp.task('serve-build',['optimize'], function() {    });")
add.note("function serve(isDev){...}")
add.note("gulp.task('serve-build',['inject'], function() {    serve(true /* isDev */);    });")
add.note("gulp.task('serve-build',['optimize'], function() {    serve(false /* isDev */);    });")
add.note("function serve(isDev){.........:::.........    .on(...{...;    startBrowserSync(isDev);    })}")
add.note("function startBrowserSync(isDev){.........:::.........    if(isDev){    gulp.watch(...).on(...)    }else{    gulp.watch([config.less, config.js, config.html],['optimize',browserSync.reload]).on(...)    .........:::.........}    }")
add.note("function startBrowserSync(isDev){.........:::.........    var options = {...    files: isDev ? [    ...    ]:[],    ...}    .........:::.........}    }")
add.note("function startBrowserSync(isDev){.........:::.........    html: clientApp + '**/*.html',    .........:::.........}    }")
add.note("$ gulp serve-dev")
add.note("$ gulp serve-build")
add.note("(function() {    'use strict';    angular.module('app.customers',[    'app.core',    'app.widgets'    ]);    })();")
add.note("$ npm install gulp-csso --save-dev")
add.note("$ npm install gulp-uglify --save-dev")
add.note
notes<-read.csv("C:/Users/Josh/Documents/CSV Personal/notes.csv",colClasses="character")
colnames(notes)
getnote<-function(pattern,notepath<-"C:/Users/Josh/Documents/CSV Personal/notes.csv"){
notes<-read.csv(notepath, colClasses="character")
workframe<-(subset(notes,grepl(pattern,notes$note)))
View(workframe)
}
getnote<-function(pattern,notepath<-"C:/Users/Josh/Documents/CSV Personal/notes.csv"){
getnote<-function
(pattern,notepath="C:/Users/Josh/Documents/CSV Personal/notes.csv"){
notes<-read.csv(notepath, colClasses="character")
workframe<-(subset(notes,grepl(pattern,notes$note)))
View(workframe)
}
getnote("$ npm")
pattern<-"$ npm"
notepath="C:/Users/Josh/Documents/CSV Personal/notes.csv"
notes<-read.csv(notepath, colClasses="character")
notes$note
grepl(pattern,notes$note)
sum(grepl(pattern,notes$note))
pattern<-"gulp.path"
subset(notes,grepl(pattern,notes$note))
?grepl
class(
notes$note)
library(XML)
library(XLSX)
install.packages("XLSX")
install.packages("xlsx")
library("xlsx")
grepl(pattern,notes$note)
sum(grepl(pattern,notes$note))
sum(grepl("$",notes$note))
sum(grepl("clean",notes$note))
pattern
sum(grepl("gulp.path",notes$note))
sum(grepl("gulp.task",notes$note))
rm(pattern,notepath)
getnote<-function(pattern,notepath="C:/Users/Josh/Documents/CSV Personal/notes.csv"){
notes<-read.csv(notepath, colClasses="character")
workframe<-(subset(notes,grepl(pattern,notes$note)))
View(workframe)
}
getnote("$ gulp")
getnote("\\$ gulp")
getnote("")
rm(notes)
add.note("$ npm install --save-dev gulp-filter gulp-csso gulp-uglify")
getnote("(gulp.task) & (optimize)")
getnote("(gulp.task('optimize'")
getnote("(gulp.task\('optimize'")
getnote("(gulp.task\\('optimize'")
getnote("(gulp.task\\\('optimize'")
getnote("(gulp.task\\\\('optimize'")
getnote("(gulp.task\\\\\('optimize'")
getnote("(gulp.task(\\()'optimize'")
getnote("(gulp.task(\\\\()'optimize'")
getnote("(gulp.task(\\\\\\()'optimize'")
getnote("(gulp.task(\\\\\\\\()'optimize'")
getnote("(gulp.task(\()'optimize'")
getnote("(gulp.task(\\( )'optimize'")
getnote("(")
getnote("\\(")
getnote("(\\()")
getnote("(gulp.task)(\\()('optimize')")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var ...;    var ...;    var cssFilter = $.filter('**/*.css');    return gulp.    src(...).pipe(...).pipe(...).pipe(...).pipe($.csso()).pipe(cssFilter).pipe(cssFilter.restore())..pipe(...).pipe(...)    });")
add.note("$ gulp clean")
add.note("$ gulp optimize")
getnote("(gulp.task)(\\()('optimize')")
add.note("gulp.task('optimize',['inject'],function() {log(...);    var ...;    var ...;    var ...;    var jsFilter = $.filter('**/*.js');    return gulp.    src(...).pipe(...).pipe(...).pipe(...).pipe(...).pipe(...).pipe(...).pipe(jsFilter).pipe($.uglify()).pipe(jsFilter).pipe(...).pipe(...).pipe(...)    });")
add.note("$ gulp clean")
add.note("$ gulp optimize")
getnote("(gulp.task)(\\()('optimize')")
add.note("$ gulp serve-build")
add.note("$ gulp serve-build")
add.note("ng-strict-di")
add.note("$ gulp serve-build")
add.note("$ gulp serve-build")
add.note("angular.module(...).controller(...);    function Dashboard(,,){angular.module(...).controller(...);    function u(d, e, f) {")
getnote("return gulp")
add.note("angular    .module('app.dashboard').controller('Dashboard', Dashboard);    function Dashboard($state, dataservice, logger){")
add.note("angular    .module('app.dashboard').controller('Dashboard', u);    function u(d, e, f){")
add.note("$npm install gulp-ng-annotate --save-dev")
add.note("$ gulp optimize")
add.note("$ npm install --save-dev gulp-ng-annotate")
getnote("return gulp")
add.note("$ gulp.task(...,[...],function(){...    .pipe($.ngAnnotate())    ...})")
add.note("$ gulp.task(...,[...],function(){...    var jsLibFilter = $.filter('**/*lib.js');    var jsAppFilter = $.filter('**/*app.js');    ...})")
getnote("cssFilter")
getnote("jsFilter")
getnote("pipe(jsFilter)")
add.note("$ gulp.task(...,[...],function(){...    pipe(jsLibFilter).    ....    pipe(jsLibFilter.restore())    ....    .pipe(jsAppFilter)    ....    .pipe(jsAppFilter.restore())    ...})")
getnote("configureStateHelper")
add.note("function configureStateHelper() {    var resolveAlways = {    ready: ready    };")
add.note("function configureStateHelper() {    var resolveAlways = {    ready: function(dataservice){    return dataservice.ready();    }    };")
add.note("$ gulp optimize")
add.note("$ gulp optimize")
getnote("ngAnnotate")
add.note("$ gulp.task(...,[...],function(){...    .pipe($.ngAnnotate({add: true}))    ...})")
add.note("$ gulp.task(...,[...],function(){...    .pipe($.ngAnnotate({remove: true}))    ...})")
add.note("optimized:{    app: 'app.js'    lib:'lib.js'};")
getnote("jsLibFilter")
add.note("$ gulp.task(...,[...],function(){...    var jsLibFilter = $.filter('**/' + config.optimized.lib);    var  = $.filter('**/' + config.optimized.app);    ...})")
add.note("$ npm install gulp-rev --save-dev")
add.note("$ npm install gulp-rev-replace --save-dev")
getnote("return gulp")
add.note("gulp.task('optimize',['inject'],function() {    ...    .pipe($.rev())    ...    });")
add.note("$ npm install --save-dev gulp-rev")
add.note("gulp.task('optimize',['inject'],function() {    ...    .pipe($.revReplace())    ...    });")
add.note("$ npm install --save-dev gulp-rev-replace")
add.note("$ gulp clean")
add.note("$ gulp optimize")
getnote("config.build")
getnote("dest(config.build)")
getnote("pipe(")
getnote("pipe\\(")
gulp.task('optimize',['inject'],function() {    ...    .pipe($.rev.manifest())    ...    });
add.note("gulp.task('optimize',['inject'],function() {    ...    .pipe($.rev.manifest())    ...    });")
add.note("$ gulp optimize")
add.note("...    'version':'0.1.0'    ...")
add.note("gulp.task('bump',function(){});")
add.note("$ npm install --save-dev gulp-bump")
add.note("gulp.task('bump',function(){    var msg = 'Bumping versions'    });")
add.note("gulp.task('bump',function(){    ...    var type = args.type;});")
add.note("gulp.task('bump',function(){    ...    var version = args.version;});")
add.note("gulp.task('bump',function(){    ...    if(version){    options.versions = version;    }});")
add.note("gulp.task('bump',function(){    ...    var options = {};    ...    });")
add.note("gulp.task('bump',function(){    ...    if(version){...    msg += ' to ' + version;    }    });")
add.note("gulp.task('bump',function(){    ...    if(version){...}    else{    options.type = type;    msg += ' for a ' + type;    }    log(msg);    });")
add.note("gulp.task('bump',function(){    ...    if(version){...}    else{    ...    return gulp    .src(config.packages)    .pipe($.bump(options))    .pipe(gulp.dest(config.root));    });")
add.note("...    packages: [    './package.json','./bower.json']...")
add.note("module.exports = function{...    packages: [    './package.json','./bower.json']...}")
add.note("module.exports = function{...    var root = './';    ...}")
add.note("module.exports = function{...    root: root,    ...}")
add.note("$ gulp bump --type=minor")
add.note("gulp task('bump', function(){...    return gulp...    .pipe($.print())    ...});")
add.note("$ gulp bump --type=minor")
add.note("$ gulp bump --version=2.3.4")
add.note("$ gulp bump --version=0.1.0")
add.note("gulp.task('test',['vet','templatecache'],function(){    startTest(true, done);    });")
add.note("gulp.task('test',['vet','templatecache'],function(){    startTests(true, done);    });")
add.note("function startTests(singleRun, done){    var karma = require('karma').server;    var excludeFiles = [];    var serverSpecs = config.serverIntegrationSpecs;    excludeFiles = serverSpecs;    karma.start({config: __dirname + '/karma.conf/js',    exclude: excludeFiles,    single: !!singleRun    }, karmaCompleted);    function karmaCompleted(karmaResult){    log('Karma completed!');    if(karmaResult === 1){    done('karma: tests failed . . .' + karmaResult);    }    }    };")
add.note("function startTests(singleRun, done){    ...    {    ...    if(karmaResult === 1){    done('karma: tests failed . . .' + karmaResult);    }else{    done();    }    }    };")
add.note("...    serverIntegrationSpecs: [client + 'tests/server-integration/**/*.spec.js']...")
add.note("module.exports = function(){    ...    serverIntegrationSpecs: [client + 'tests/server-integration/**/*.spec.js']    ...    }")
add.note("    ...    config.karma = getKarmaOptions();    ...    ")
add.note("    ...    function getKarmaOptions(){    var options = {};    }    ...    ")
add.note("    ...    function getKarmaOptions(){    ...    return options;    }    ...    ")
add.note("    ...    function getKarmaOptions(){    var options = {    files: [].concat(    bowerFiles,    config.specHelpers    client + '**/*.module.js'    client + '**/*.js'    temp + config.templateCache.file,    config.serverIntegrationSpecs    )};    ...    }    ...    ")
add.note("    ...    function getKarmaOptions(){    var options = {    files: [].concat(    ...    ),    exclude: [],    coverage: {    dir: report + 'coverage'    }    };    ...    }    ...    ")
add.note("module.exports = function(){}    ...    function getKarmaOptions(){    var options = {    files: [].concat(    ...    ),    exclude: [],    coverage: {    dir: report + 'coverage'    }    };    ...    }    ...    }")
add.note("module.exports = function(){}    ...    var report = './report/';    ...    }")
add.note("module.exports = function(){}    ...    var config = {    ...    report: report    }    ...    }")
getnote("dir: report")
add.note("module.exports = function(){    ...    function getKarmaOptions(){    var options = {    files: [].concat(    ...    ),    exclude: [],    coverage: {    ...    reporters:[    {type: 'html', subdir: 'report-html'}    {type: 'lcov', subdir: 'report-lcov'}    {type: 'text-summary'}    ]    }    };    ...    }    ...    }")
add.note("module.exports = function(){    ...    {    ...    preprocessors: {}    }    options.preprocessors[clientApp + '**/!(*.spec)+(.js)'] = ['coverage'];    return options;    }")
getnote("var report")
module.exports = function(){}    ...    var wiredep = require('wiredep');    var bowerFile = wiredep({devDependencies: true})['js'];    ...    }
